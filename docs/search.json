[{"path":"index.html","id":"prerequisites","chapter":"1 Prerequisites","heading":"1 Prerequisites","text":"sample book written Markdown. can use anything Pandoc’s Markdown supports, e.g., math equation \\(^2 + b^2 = c^2\\).bookdown package can installed CRAN Github:Remember Rmd file contains one one chapter, chapter defined first-level heading #.compile example PDF, need XeLaTeX. recommended install TinyTeX (includes XeLaTeX): https://yihui.name/tinytex/.","code":"\ninstall.packages(\"bookdown\")\n# or the development version\n# devtools::install_github(\"rstudio/bookdown\")"},{"path":"tabular-data-representation---datatable.html","id":"tabular-data-representation---datatable","chapter":"2 Tabular Data Representation - DataTable","heading":"2 Tabular Data Representation - DataTable","text":"","code":""},{"path":"tabular-data-representation---datatable.html","id":"datatable-schema","chapter":"2 Tabular Data Representation - DataTable","heading":"2.1 DataTable Schema","text":"data science programming languages derive DataTable schema data source. easy \ndata source schema, SQL table, data source consistent complete, \nCSV file missing field ’s first row.real world, often work imperfect data defining schema upfront preferred.Example FTX exchange provides RESTful API users retrieve balance tokens wallet.\nwallet least one token non-trivial balance, response message body like following:can easily convert JSON object DataTable python:However, wallet empty, response body becomes:empty response, python script generate empty DataFrame completely different\nschema. proper way set schema explicitly specify column names types:can see, verbose. Even worse, logic implemeted two steps:step 1, set column names load data;step 2, set schema column (cast column types necessary).un-natural. better way implement :step 1, set column names types;step 2, load data.","code":"{\n    \"success\": true,\n    \"result\": [\n        {\n            \"coin\": \"ETH\",\n            \"total\": -0.05008361,\n            \"free\": 0.60553512,\n            \"availableForWithdrawal\": 0.60553512,\n            \"availableWithoutBorrow\": 0,\n            \"usdValue\": -65.54655549160535,\n            \"spotBorrow\": 0.05008361\n        }\n    ]\n}import requests\nfrom pandas import DataFrame\n\nresp = requests.get(\"https://ftx.com/api/wallet/balances\") # ignore authentication\nassert resp.status_code == 200, f\"Request failed {resp.text}\"\ndf = DataFrame(resp.json()[\"result\"]){\n    \"success\": true,\n    \"result\": []\n}responsJson = []  # assume we got empty data from the API response\nI = lambda x: x.split(\",\")\ndf = DataFrame(\n    responsJson, \n    columns=I(\"coin,total,free,availableForWithdrawal,availableWithoutBorrow,usdValue,spotBorrow\")\n)\nfor col in I(\"total,free,availableForWithdrawal,availableWithoutBorrow,usdValue,spotBorrow\"):\n  df[col] = pd.to_numeric(df[col])"},{"path":"intro.html","id":"intro","chapter":"3 Introduction","heading":"3 Introduction","text":"can label chapter section titles using {#label} , e.g., can reference Chapter 3. manually label , automatic labels anyway, e.g., Chapter 5.Figures tables captions placed figure table environments, respectively.\nFigure 3.1: nice figure!\nReference figure code chunk label fig: prefix, e.g., see Figure 3.1. Similarly, can reference tables generated knitr::kable(), e.g., see Table 3.1.Table 3.1: nice table!can write citations, . example, using bookdown package (Xie 2022) sample book, built top R Markdown knitr (Xie 2015).","code":"\npar(mar = c(4, 4, .1, .1))\nplot(pressure, type = 'b', pch = 19)\nknitr::kable(\n  head(iris, 20), caption = 'Here is a nice table!',\n  booktabs = TRUE\n)"},{"path":"literature.html","id":"literature","chapter":"4 Literature","heading":"4 Literature","text":"review existing methods.","code":""},{"path":"methods.html","id":"methods","chapter":"5 Methods","heading":"5 Methods","text":"describe methods chapter.Math can added body using usual syntax like ","code":""},{"path":"methods.html","id":"math-example","chapter":"5 Methods","heading":"5.1 math example","text":"\\(p\\) unknown expected around 1/3. Standard error approximated\\[\nSE = \\sqrt(\\frac{p(1-p)}{n}) \\approx \\sqrt{\\frac{1/3 (1 - 1/3)} {300}} = 0.027\n\\]can also use math footnotes like this1.approximate standard error 0.0272","code":""},{"path":"applications.html","id":"applications","chapter":"6 Applications","heading":"6 Applications","text":"significant applications demonstrated chapter.","code":""},{"path":"applications.html","id":"example-one","chapter":"6 Applications","heading":"6.1 Example one","text":"","code":""},{"path":"applications.html","id":"example-two","chapter":"6 Applications","heading":"6.2 Example two","text":"","code":""},{"path":"final-words.html","id":"final-words","chapter":"7 Final Words","heading":"7 Final Words","text":"finished nice book.","code":""},{"path":"references.html","id":"references","chapter":"References","heading":"References","text":"","code":""}]
